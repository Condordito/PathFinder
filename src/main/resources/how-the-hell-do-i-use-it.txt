
# ROADMAPS, WAYPOINTS AND EDGES

To get started, first create a roadmap. A roadmap represents a so-called
graph, a web of points and connections from one point to another.
Roadmaps (graphs) in this plugin are directed graphs, which means that
point A can be connected with point B while B is not connected with point A.
So if navigation is used, this would represent a one way road.

To create a roadmap, use '/roadmap create <key>'. Afterwards, you can rename
it with '/roadmap edit <key> name <name>'. Keep in mind though, that the key of the
roadmap is permanent, so to administrators, the roadmap will always be named
the way you name it first. Don't start with 'test' and setup everything with it :P

If your roadmap has been created, you can then use '/roadmap editmode <key>', to
activate the editmode and create points (so-called nodes or waypoints) and
edges.
Place waypoints at crossings with the node tool and connect them along the roads with the edge tool.
Left-click in the air with the edge tool to toggle between directed and undirected edges.

# NODEGROUPS - DISCOVERING & NAVIGATING

discoverable: If the player walks past, a discovering effect (title, sound, ...) appears.
navigable: The object has a set of keywords and users can start the shortest path visualization

To make waypoints discoverable and navigable, you have to assign them
to a nodegroup. Nodegroups carry all the important information:
- the name of the place to discover
- permissions, in case you want to make parts of the map restricted
- the find-distance that the player has to the object to discover it
- if nodes can be navigated to
- if nodes can be discovered
- the search-terms for your gps system ('/find location searchtermA&searchtermB')
Nodegroups are used across all roadmaps independently, so if you create a
group 'towncenter' and use it twice on two different roadmaps, discovering
the town center of town A will also discover the town center of town B.

If this is not what you want to achieve, create two groups 'towncenterA' and
'towncenterB' and name them both 'Town Center' with 'nodegroup set <group> name <name>'

The find command uses set arithmetic to define the target position.
The syntax is quite simple:
'|' means the union of two groups: [a, b, c] | [c, d, e] = [a, b, c, d, e]
'&' means the intersection of two groups: [a, b, c] & [c, d, e] = [c]
& binds stronger than |, so [a, b] | [b, c] & [c, d] is not [c] but [a, b, c]
Parenthesis can be used to change binding, like + and * in simple maths.

Applied to nodegroups, this means:
'/find location street&(shoppingcenter|parkinglot)'
is equals to
'Find me the nearest node that is in the group street and also either a shopping center or a parting lot'
because each searchterm (street, shoppingcenter and parkinglot) represent a group of nodes.
Of course, you can also simply type '/find location parkinglot' without set operations.

# PATH VISUALIZATION

The way particles look to the user can be changed with pathvisualizers.
Pathvisualizers don't even require to be particles at all, they can also be
an entity moving along the path or a sound that has to be followed.
If you are into java development, you can extend pathvisualizers to your
requirements.
Otherwise, you can toggle everything possible with the /pathvisualizer command.