/*
 * This file is generated by jOOQ.
 */
package de.cubbossa.pathfinder.jooq.tables;


import de.cubbossa.pathfinder.jooq.DefaultSchema;
import de.cubbossa.pathfinder.jooq.Keys;
import de.cubbossa.pathfinder.jooq.tables.records.PathfinderNodesRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PathfinderNodes extends TableImpl<PathfinderNodesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pathfinder_nodes</code>
     */
    public static final PathfinderNodes PATHFINDER_NODES = new PathfinderNodes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PathfinderNodesRecord> getRecordType() {
        return PathfinderNodesRecord.class;
    }

    /**
     * The column <code>pathfinder_nodes.id</code>.
     */
    public final TableField<PathfinderNodesRecord, byte[]> ID = createField(DSL.name("id"), SQLDataType.BINARY.nullable(false), this, "");

    /**
     * The column <code>pathfinder_nodes.world</code>.
     */
    public final TableField<PathfinderNodesRecord, byte[]> WORLD = createField(DSL.name("world"), SQLDataType.BINARY, this, "");

    /**
     * The column <code>pathfinder_nodes.x</code>.
     */
    public final TableField<PathfinderNodesRecord, Double> X = createField(DSL.name("x"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>pathfinder_nodes.y</code>.
     */
    public final TableField<PathfinderNodesRecord, Double> Y = createField(DSL.name("y"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>pathfinder_nodes.z</code>.
     */
    public final TableField<PathfinderNodesRecord, Double> Z = createField(DSL.name("z"), SQLDataType.DOUBLE.nullable(false), this, "");

    private PathfinderNodes(Name alias, Table<PathfinderNodesRecord> aliased) {
        this(alias, aliased, null);
    }

    private PathfinderNodes(Name alias, Table<PathfinderNodesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>pathfinder_nodes</code> table reference
     */
    public PathfinderNodes(String alias) {
        this(DSL.name(alias), PATHFINDER_NODES);
    }

    /**
     * Create an aliased <code>pathfinder_nodes</code> table reference
     */
    public PathfinderNodes(Name alias) {
        this(alias, PATHFINDER_NODES);
    }

    /**
     * Create a <code>pathfinder_nodes</code> table reference
     */
    public PathfinderNodes() {
        this(DSL.name("pathfinder_nodes"), null);
    }

    public <O extends Record> PathfinderNodes(Table<O> child, ForeignKey<O, PathfinderNodesRecord> key) {
        super(child, key, PATHFINDER_NODES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<PathfinderNodesRecord> getPrimaryKey() {
        return Keys.PATHFINDER_NODES__NEWTABLE_PK;
    }

    @Override
    public PathfinderNodes as(String alias) {
        return new PathfinderNodes(DSL.name(alias), this);
    }

    @Override
    public PathfinderNodes as(Name alias) {
        return new PathfinderNodes(alias, this);
    }

    @Override
    public PathfinderNodes as(Table<?> alias) {
        return new PathfinderNodes(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PathfinderNodes rename(String name) {
        return new PathfinderNodes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PathfinderNodes rename(Name name) {
        return new PathfinderNodes(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PathfinderNodes rename(Table<?> name) {
        return new PathfinderNodes(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<byte[], byte[], Double, Double, Double> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super byte[], ? super byte[], ? super Double, ? super Double, ? super Double, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super byte[], ? super byte[], ? super Double, ? super Double, ? super Double, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
