/*
 * This file is generated by jOOQ.
 */
package de.cubbossa.pathfinder.jooq.tables;


import de.cubbossa.pathfinder.data.NamespacedKeyConverter;
import de.cubbossa.pathfinder.jooq.DefaultSchema;
import de.cubbossa.pathfinder.jooq.Keys;
import de.cubbossa.pathfinder.jooq.tables.records.PathfinderNodegroupNodesRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.bukkit.NamespacedKey;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PathfinderNodegroupNodes extends TableImpl<PathfinderNodegroupNodesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pathfinder_nodegroup_nodes</code>
     */
    public static final PathfinderNodegroupNodes PATHFINDER_NODEGROUP_NODES = new PathfinderNodegroupNodes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PathfinderNodegroupNodesRecord> getRecordType() {
        return PathfinderNodegroupNodesRecord.class;
    }

    /**
     * The column <code>pathfinder_nodegroup_nodes.group_key</code>.
     */
    public final TableField<PathfinderNodegroupNodesRecord, NamespacedKey> GROUP_KEY = createField(DSL.name("group_key"), SQLDataType.VARCHAR.nullable(false), this, "", new NamespacedKeyConverter());

    /**
     * The column <code>pathfinder_nodegroup_nodes.node_id</code>.
     */
    public final TableField<PathfinderNodegroupNodesRecord, Integer> NODE_ID = createField(DSL.name("node_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private PathfinderNodegroupNodes(Name alias, Table<PathfinderNodegroupNodesRecord> aliased) {
        this(alias, aliased, null);
    }

    private PathfinderNodegroupNodes(Name alias, Table<PathfinderNodegroupNodesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>pathfinder_nodegroup_nodes</code> table reference
     */
    public PathfinderNodegroupNodes(String alias) {
        this(DSL.name(alias), PATHFINDER_NODEGROUP_NODES);
    }

    /**
     * Create an aliased <code>pathfinder_nodegroup_nodes</code> table reference
     */
    public PathfinderNodegroupNodes(Name alias) {
        this(alias, PATHFINDER_NODEGROUP_NODES);
    }

    /**
     * Create a <code>pathfinder_nodegroup_nodes</code> table reference
     */
    public PathfinderNodegroupNodes() {
        this(DSL.name("pathfinder_nodegroup_nodes"), null);
    }

    public <O extends Record> PathfinderNodegroupNodes(Table<O> child, ForeignKey<O, PathfinderNodegroupNodesRecord> key) {
        super(child, key, PATHFINDER_NODEGROUP_NODES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<PathfinderNodegroupNodesRecord> getPrimaryKey() {
        return Keys.PATHFINDER_NODEGROUP_NODES__PK_PATHFINDER_NODEGROUP_NODES;
    }

    @Override
    public List<ForeignKey<PathfinderNodegroupNodesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PATHFINDER_NODEGROUP_NODES__FK_PATHFINDER_NODEGROUP_NODES_PK_PATHFINDER_NODEGROUPS);
    }

    private transient PathfinderNodegroups _pathfinderNodegroups;

    /**
     * Get the implicit join path to the <code>pathfinder_nodegroups</code>
     * table.
     */
    public PathfinderNodegroups pathfinderNodegroups() {
        if (_pathfinderNodegroups == null)
            _pathfinderNodegroups = new PathfinderNodegroups(this, Keys.PATHFINDER_NODEGROUP_NODES__FK_PATHFINDER_NODEGROUP_NODES_PK_PATHFINDER_NODEGROUPS);

        return _pathfinderNodegroups;
    }

    @Override
    public PathfinderNodegroupNodes as(String alias) {
        return new PathfinderNodegroupNodes(DSL.name(alias), this);
    }

    @Override
    public PathfinderNodegroupNodes as(Name alias) {
        return new PathfinderNodegroupNodes(alias, this);
    }

    @Override
    public PathfinderNodegroupNodes as(Table<?> alias) {
        return new PathfinderNodegroupNodes(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PathfinderNodegroupNodes rename(String name) {
        return new PathfinderNodegroupNodes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PathfinderNodegroupNodes rename(Name name) {
        return new PathfinderNodegroupNodes(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PathfinderNodegroupNodes rename(Table<?> name) {
        return new PathfinderNodegroupNodes(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<NamespacedKey, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super NamespacedKey, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super NamespacedKey, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
