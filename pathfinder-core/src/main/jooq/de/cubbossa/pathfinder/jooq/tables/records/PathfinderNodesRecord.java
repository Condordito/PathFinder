/*
 * This file is generated by jOOQ.
 */
package de.cubbossa.pathfinder.jooq.tables.records;


import de.cubbossa.pathfinder.jooq.tables.PathfinderNodes;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PathfinderNodesRecord extends UpdatableRecordImpl<PathfinderNodesRecord> implements Record5<byte[], byte[], Double, Double, Double> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>pathfinder_nodes.id</code>.
     */
    public void setId(byte[] value) {
        set(0, value);
    }

    /**
     * Getter for <code>pathfinder_nodes.id</code>.
     */
    public byte[] getId() {
        return (byte[]) get(0);
    }

    /**
     * Setter for <code>pathfinder_nodes.world</code>.
     */
    public void setWorld(byte[] value) {
        set(1, value);
    }

    /**
     * Getter for <code>pathfinder_nodes.world</code>.
     */
    public byte[] getWorld() {
        return (byte[]) get(1);
    }

    /**
     * Setter for <code>pathfinder_nodes.x</code>.
     */
    public void setX(Double value) {
        set(2, value);
    }

    /**
     * Getter for <code>pathfinder_nodes.x</code>.
     */
    public Double getX() {
        return (Double) get(2);
    }

    /**
     * Setter for <code>pathfinder_nodes.y</code>.
     */
    public void setY(Double value) {
        set(3, value);
    }

    /**
     * Getter for <code>pathfinder_nodes.y</code>.
     */
    public Double getY() {
        return (Double) get(3);
    }

    /**
     * Setter for <code>pathfinder_nodes.z</code>.
     */
    public void setZ(Double value) {
        set(4, value);
    }

    /**
     * Getter for <code>pathfinder_nodes.z</code>.
     */
    public Double getZ() {
        return (Double) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<byte[]> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<byte[], byte[], Double, Double, Double> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<byte[], byte[], Double, Double, Double> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<byte[]> field1() {
        return PathfinderNodes.PATHFINDER_NODES.ID;
    }

    @Override
    public Field<byte[]> field2() {
        return PathfinderNodes.PATHFINDER_NODES.WORLD;
    }

    @Override
    public Field<Double> field3() {
        return PathfinderNodes.PATHFINDER_NODES.X;
    }

    @Override
    public Field<Double> field4() {
        return PathfinderNodes.PATHFINDER_NODES.Y;
    }

    @Override
    public Field<Double> field5() {
        return PathfinderNodes.PATHFINDER_NODES.Z;
    }

    @Override
    public byte[] component1() {
        return getId();
    }

    @Override
    public byte[] component2() {
        return getWorld();
    }

    @Override
    public Double component3() {
        return getX();
    }

    @Override
    public Double component4() {
        return getY();
    }

    @Override
    public Double component5() {
        return getZ();
    }

    @Override
    public byte[] value1() {
        return getId();
    }

    @Override
    public byte[] value2() {
        return getWorld();
    }

    @Override
    public Double value3() {
        return getX();
    }

    @Override
    public Double value4() {
        return getY();
    }

    @Override
    public Double value5() {
        return getZ();
    }

    @Override
    public PathfinderNodesRecord value1(byte[] value) {
        setId(value);
        return this;
    }

    @Override
    public PathfinderNodesRecord value2(byte[] value) {
        setWorld(value);
        return this;
    }

    @Override
    public PathfinderNodesRecord value3(Double value) {
        setX(value);
        return this;
    }

    @Override
    public PathfinderNodesRecord value4(Double value) {
        setY(value);
        return this;
    }

    @Override
    public PathfinderNodesRecord value5(Double value) {
        setZ(value);
        return this;
    }

    @Override
    public PathfinderNodesRecord values(byte[] value1, byte[] value2, Double value3, Double value4, Double value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PathfinderNodesRecord
     */
    public PathfinderNodesRecord() {
        super(PathfinderNodes.PATHFINDER_NODES);
    }

    /**
     * Create a detached, initialised PathfinderNodesRecord
     */
    public PathfinderNodesRecord(byte[] id, byte[] world, Double x, Double y, Double z) {
        super(PathfinderNodes.PATHFINDER_NODES);

        setId(id);
        setWorld(world);
        setX(x);
        setY(y);
        setZ(z);
    }
}
