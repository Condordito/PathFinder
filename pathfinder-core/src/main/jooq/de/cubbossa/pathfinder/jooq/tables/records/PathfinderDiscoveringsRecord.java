/*
 * This file is generated by jOOQ.
 */
package de.cubbossa.pathfinder.jooq.tables.records;


import de.cubbossa.pathfinder.misc.NamespacedKey;
import de.cubbossa.pathfinder.jooq.tables.PathfinderDiscoverings;

import java.time.LocalDateTime;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PathfinderDiscoveringsRecord extends UpdatableRecordImpl<PathfinderDiscoveringsRecord> implements Record3<NamespacedKey, UUID, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>pathfinder_discoverings.discover_key</code>.
     */
    public void setDiscoverKey(NamespacedKey value) {
        set(0, value);
    }

    /**
     * Getter for <code>pathfinder_discoverings.discover_key</code>.
     */
    public NamespacedKey getDiscoverKey() {
        return (NamespacedKey) get(0);
    }

    /**
     * Setter for <code>pathfinder_discoverings.player_id</code>.
     */
    public void setPlayerId(UUID value) {
        set(1, value);
    }

    /**
     * Getter for <code>pathfinder_discoverings.player_id</code>.
     */
    public UUID getPlayerId() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>pathfinder_discoverings.date</code>.
     */
    public void setDate(LocalDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>pathfinder_discoverings.date</code>.
     */
    public LocalDateTime getDate() {
        return (LocalDateTime) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<NamespacedKey, UUID> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<NamespacedKey, UUID, LocalDateTime> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<NamespacedKey, UUID, LocalDateTime> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<NamespacedKey> field1() {
        return PathfinderDiscoverings.PATHFINDER_DISCOVERINGS.DISCOVER_KEY;
    }

    @Override
    public Field<UUID> field2() {
        return PathfinderDiscoverings.PATHFINDER_DISCOVERINGS.PLAYER_ID;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return PathfinderDiscoverings.PATHFINDER_DISCOVERINGS.DATE;
    }

    @Override
    public NamespacedKey component1() {
        return getDiscoverKey();
    }

    @Override
    public UUID component2() {
        return getPlayerId();
    }

    @Override
    public LocalDateTime component3() {
        return getDate();
    }

    @Override
    public NamespacedKey value1() {
        return getDiscoverKey();
    }

    @Override
    public UUID value2() {
        return getPlayerId();
    }

    @Override
    public LocalDateTime value3() {
        return getDate();
    }

    @Override
    public PathfinderDiscoveringsRecord value1(NamespacedKey value) {
        setDiscoverKey(value);
        return this;
    }

    @Override
    public PathfinderDiscoveringsRecord value2(UUID value) {
        setPlayerId(value);
        return this;
    }

    @Override
    public PathfinderDiscoveringsRecord value3(LocalDateTime value) {
        setDate(value);
        return this;
    }

    @Override
    public PathfinderDiscoveringsRecord values(NamespacedKey value1, UUID value2, LocalDateTime value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PathfinderDiscoveringsRecord
     */
    public PathfinderDiscoveringsRecord() {
        super(PathfinderDiscoverings.PATHFINDER_DISCOVERINGS);
    }

    /**
     * Create a detached, initialised PathfinderDiscoveringsRecord
     */
    public PathfinderDiscoveringsRecord(NamespacedKey discoverKey, UUID playerId, LocalDateTime date) {
        super(PathfinderDiscoverings.PATHFINDER_DISCOVERINGS);

        setDiscoverKey(discoverKey);
        setPlayerId(playerId);
        setDate(date);
    }
}
