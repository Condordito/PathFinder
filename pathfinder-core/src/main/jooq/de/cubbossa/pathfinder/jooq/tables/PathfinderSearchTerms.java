/*
 * This file is generated by jOOQ.
 */
package de.cubbossa.pathfinder.jooq.tables;


import de.cubbossa.pathfinder.data.NamespacedKeyConverter;
import de.cubbossa.pathfinder.jooq.DefaultSchema;
import de.cubbossa.pathfinder.jooq.Keys;
import de.cubbossa.pathfinder.jooq.tables.records.PathfinderSearchTermsRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.bukkit.NamespacedKey;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PathfinderSearchTerms extends TableImpl<PathfinderSearchTermsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pathfinder_search_terms</code>
     */
    public static final PathfinderSearchTerms PATHFINDER_SEARCH_TERMS = new PathfinderSearchTerms();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PathfinderSearchTermsRecord> getRecordType() {
        return PathfinderSearchTermsRecord.class;
    }

    /**
     * The column <code>pathfinder_search_terms.group_key</code>.
     */
    public final TableField<PathfinderSearchTermsRecord, NamespacedKey> GROUP_KEY = createField(DSL.name("group_key"), SQLDataType.VARCHAR.nullable(false), this, "", new NamespacedKeyConverter());

    /**
     * The column <code>pathfinder_search_terms.search_term</code>.
     */
    public final TableField<PathfinderSearchTermsRecord, String> SEARCH_TERM = createField(DSL.name("search_term"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    private PathfinderSearchTerms(Name alias, Table<PathfinderSearchTermsRecord> aliased) {
        this(alias, aliased, null);
    }

    private PathfinderSearchTerms(Name alias, Table<PathfinderSearchTermsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>pathfinder_search_terms</code> table reference
     */
    public PathfinderSearchTerms(String alias) {
        this(DSL.name(alias), PATHFINDER_SEARCH_TERMS);
    }

    /**
     * Create an aliased <code>pathfinder_search_terms</code> table reference
     */
    public PathfinderSearchTerms(Name alias) {
        this(alias, PATHFINDER_SEARCH_TERMS);
    }

    /**
     * Create a <code>pathfinder_search_terms</code> table reference
     */
    public PathfinderSearchTerms() {
        this(DSL.name("pathfinder_search_terms"), null);
    }

    public <O extends Record> PathfinderSearchTerms(Table<O> child, ForeignKey<O, PathfinderSearchTermsRecord> key) {
        super(child, key, PATHFINDER_SEARCH_TERMS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<PathfinderSearchTermsRecord> getPrimaryKey() {
        return Keys.PATHFINDER_SEARCH_TERMS__PK_PATHFINDER_SEARCH_TERMS;
    }

    @Override
    public List<ForeignKey<PathfinderSearchTermsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PATHFINDER_SEARCH_TERMS__FK_PATHFINDER_SEARCH_TERMS_PATHFINDER_NODEGROUPS__PK);
    }

    private transient PathfinderNodegroups _pathfinderNodegroups;

    /**
     * Get the implicit join path to the <code>pathfinder_nodegroups</code>
     * table.
     */
    public PathfinderNodegroups pathfinderNodegroups() {
        if (_pathfinderNodegroups == null)
            _pathfinderNodegroups = new PathfinderNodegroups(this, Keys.PATHFINDER_SEARCH_TERMS__FK_PATHFINDER_SEARCH_TERMS_PATHFINDER_NODEGROUPS__PK);

        return _pathfinderNodegroups;
    }

    @Override
    public PathfinderSearchTerms as(String alias) {
        return new PathfinderSearchTerms(DSL.name(alias), this);
    }

    @Override
    public PathfinderSearchTerms as(Name alias) {
        return new PathfinderSearchTerms(alias, this);
    }

    @Override
    public PathfinderSearchTerms as(Table<?> alias) {
        return new PathfinderSearchTerms(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PathfinderSearchTerms rename(String name) {
        return new PathfinderSearchTerms(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PathfinderSearchTerms rename(Name name) {
        return new PathfinderSearchTerms(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PathfinderSearchTerms rename(Table<?> name) {
        return new PathfinderSearchTerms(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<NamespacedKey, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super NamespacedKey, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super NamespacedKey, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
