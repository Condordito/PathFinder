/*
 * This file is generated by jOOQ.
 */
package de.cubbossa.pathfinder.v3.tables;


import de.cubbossa.pathapi.misc.NamespacedKey;
import de.cubbossa.pathfinder.storage.misc.NamespacedKeyConverter;
import de.cubbossa.pathfinder.v3.DefaultSchema;
import de.cubbossa.pathfinder.v3.Keys;
import de.cubbossa.pathfinder.v3.tables.records.PathfinderNodegroupsNodesRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class PathfinderNodegroupsNodes extends TableImpl<PathfinderNodegroupsNodesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pathfinder_nodegroups_nodes</code>
     */
    public static final PathfinderNodegroupsNodes PATHFINDER_NODEGROUPS_NODES = new PathfinderNodegroupsNodes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PathfinderNodegroupsNodesRecord> getRecordType() {
        return PathfinderNodegroupsNodesRecord.class;
    }

    /**
     * The column <code>pathfinder_nodegroups_nodes.group_key</code>.
     */
    public final TableField<PathfinderNodegroupsNodesRecord, NamespacedKey> GROUP_KEY = createField(DSL.name("group_key"), SQLDataType.VARCHAR(64).nullable(false), this, "", new NamespacedKeyConverter());

    /**
     * The column <code>pathfinder_nodegroups_nodes.node_id</code>.
     */
    public final TableField<PathfinderNodegroupsNodesRecord, Integer> NODE_ID = createField(DSL.name("node_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private PathfinderNodegroupsNodes(Name alias, Table<PathfinderNodegroupsNodesRecord> aliased) {
        this(alias, aliased, null);
    }

    private PathfinderNodegroupsNodes(Name alias, Table<PathfinderNodegroupsNodesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>pathfinder_nodegroups_nodes</code> table
     * reference
     */
    public PathfinderNodegroupsNodes(String alias) {
        this(DSL.name(alias), PATHFINDER_NODEGROUPS_NODES);
    }

    /**
     * Create an aliased <code>pathfinder_nodegroups_nodes</code> table
     * reference
     */
    public PathfinderNodegroupsNodes(Name alias) {
        this(alias, PATHFINDER_NODEGROUPS_NODES);
    }

    /**
     * Create a <code>pathfinder_nodegroups_nodes</code> table reference
     */
    public PathfinderNodegroupsNodes() {
        this(DSL.name("pathfinder_nodegroups_nodes"), null);
    }

    public <O extends Record> PathfinderNodegroupsNodes(Table<O> child, ForeignKey<O, PathfinderNodegroupsNodesRecord> key) {
        super(child, key, PATHFINDER_NODEGROUPS_NODES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<PathfinderNodegroupsNodesRecord> getPrimaryKey() {
        return Keys.PATHFINDER_NODEGROUPS_NODES__PK_PATHFINDER_NODEGROUPS_NODES;
    }

    @Override
    public List<ForeignKey<PathfinderNodegroupsNodesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PATHFINDER_NODEGROUPS_NODES__FK_PATHFINDER_NODEGROUPS_NODES_PK_PATHFINDER_NODEGROUPS, Keys.PATHFINDER_NODEGROUPS_NODES__FK_PATHFINDER_NODEGROUPS_NODES_PK_PATHFINDER_NODES);
    }

    private transient PathfinderNodegroups _pathfinderNodegroups;
    private transient PathfinderNodes _pathfinderNodes;

    /**
     * Get the implicit join path to the <code>pathfinder_nodegroups</code>
     * table.
     */
    public PathfinderNodegroups pathfinderNodegroups() {
        if (_pathfinderNodegroups == null)
            _pathfinderNodegroups = new PathfinderNodegroups(this, Keys.PATHFINDER_NODEGROUPS_NODES__FK_PATHFINDER_NODEGROUPS_NODES_PK_PATHFINDER_NODEGROUPS);

        return _pathfinderNodegroups;
    }

    /**
     * Get the implicit join path to the <code>pathfinder_nodes</code> table.
     */
    public PathfinderNodes pathfinderNodes() {
        if (_pathfinderNodes == null)
            _pathfinderNodes = new PathfinderNodes(this, Keys.PATHFINDER_NODEGROUPS_NODES__FK_PATHFINDER_NODEGROUPS_NODES_PK_PATHFINDER_NODES);

        return _pathfinderNodes;
    }

    @Override
    public PathfinderNodegroupsNodes as(String alias) {
        return new PathfinderNodegroupsNodes(DSL.name(alias), this);
    }

    @Override
    public PathfinderNodegroupsNodes as(Name alias) {
        return new PathfinderNodegroupsNodes(alias, this);
    }

    @Override
    public PathfinderNodegroupsNodes as(Table<?> alias) {
        return new PathfinderNodegroupsNodes(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PathfinderNodegroupsNodes rename(String name) {
        return new PathfinderNodegroupsNodes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PathfinderNodegroupsNodes rename(Name name) {
        return new PathfinderNodegroupsNodes(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PathfinderNodegroupsNodes rename(Table<?> name) {
        return new PathfinderNodegroupsNodes(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<NamespacedKey, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super NamespacedKey, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super NamespacedKey, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
